version: "3.8"

services:
  vote:
    image: rssureshkumar/voting-app-vote:latest
    networks:
      - backend
    deploy:
      replicas: 3   # scalable
      restart_policy:
        condition: on-failure

  result:
    image: rssureshkumar/voting-app-result:latest
    networks:
      - backend
    deploy:
      replicas: 2   # scalable
      restart_policy:
        condition: on-failure

  ui:
    image: rssureshkumar/voting-app-ui:latest
    ports:
      - "8080:80"   # only UI exposed externally
    networks:
      - frontend
    depends_on:
      - vote
      - result
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure

  worker:
    image: rssureshkumar/voting-app-worker:latest
    networks:
      - backend
    deploy:
      mode: global
      restart_policy:
        condition: on-failure

  redis:
    image: redis:alpine
    networks:
      - backend
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  db:
    image: mysql:8
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: voteapp
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - backend
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  visualizer:
    image: dockersamples/visualizer:latest
    ports:
      - "8081:8080"   # only one manager node
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
    networks:
      - frontend

networks:
  frontend:
    driver: overlay
  backend:
    driver: overlay

volumes:
  db-data:
